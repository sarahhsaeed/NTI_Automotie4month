
LoginSys_app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000008ea  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000008ea  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 00000054  00000000  00000000  00000919  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001d8  00000000  00000000  0000096d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000345f  00000000  00000000  00000b45  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cbf  00000000  00000000  00003fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001074  00000000  00000000  00004c63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004c0  00000000  00000000  00005cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033f  00000000  00000000  00006198  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000eb1  00000000  00000000  000064d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000198  00000000  00000000  00007388  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000848  00000848  000008dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00007520  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.H_LCD_void_latchByte 000000aa  00000292  00000292  00000326  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.H_LCD_void_sendData 00000026  00000724  00000724  000007b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.H_LCD_void_sendCommand 00000026  0000074a  0000074a  000007de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.H_LCD_void_Init 000000ce  000001c4  000001c4  00000258  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.H_LCD_void_sendString 00000040  000005b2  000005b2  00000646  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.H_LCD_void_sendIntNum 000000e4  000000e0  000000e0  00000174  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .progmemx.data.data_pins 00000004  000000dc  000000dc  00000170  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 21 .text.SysInit 0000001a  000007d4  000007d4  00000868  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.Ultrasonic_edgeProcessing 0000003e  000005f2  000005f2  00000686  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.Ultrasonic_init 00000044  0000052a  0000052a  000005be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.Ultrasonic_Trigger 00000022  00000794  00000794  00000828  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.Ultrasonic_readDistance 00000030  00000668  00000668  000006fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .bss.g_edgesCount 00000001  0080006a  0080006a  000008ea  2**0
                  ALLOC
 27 .bss.g_pulseTime 00000002  00800068  00800068  000008ea  2**0
                  ALLOC
 28 .progmemx.data 0000000e  000000ce  000000ce  00000162  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 29 .text.main    00000024  00000770  00000770  00000804  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.DIO_voidSetPinDirection 0000007c  0000033c  0000033c  000003d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.DIO_voidSetPinValue 0000007c  000003b8  000003b8  0000044c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.enable_GIE 00000008  00000834  00000834  000008c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.ICU_init 0000002e  000006c8  000006c8  0000075c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.ICU_setEdgeDetectionType 00000014  00000804  00000804  00000898  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.ICU_clearTimerValue 00000006  0000083c  0000083c  000008d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.ICU_getInputCaptureValue 00000006  00000842  00000842  000008d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.Timer1_EnableInt 00000030  00000698  00000698  0000072c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.Timer1_EXTI_setCallBack 00000038  00000630  00000630  000006c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.__vector_9 00000052  00000434  00000434  000004c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.__vector_8 00000052  00000486  00000486  0000051a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.__vector_7 00000052  000004d8  000004d8  0000056c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .bss.Timer1_ptr_to_callback_fns 00000008  00800060  00800060  000008ea  2**0
                  ALLOC
 43 .text.libgcc.div 0000002e  000006f6  000006f6  0000078a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.libgcc.div 00000010  00000818  00000818  000008ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.libgcc  0000000c  00000828  00000828  000008bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.libgcc.mul 0000001e  000007b6  000007b6  0000084a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.libgcc.div 00000044  0000056e  0000056e  00000602  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.__dummy_fini 00000002  00000850  00000850  000008e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.__dummy_funcs_on_exit 00000002  00000852  00000852  000008e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.__dummy_simulator_exit 00000002  00000854  00000854  000008e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.exit    00000016  000007ee  000007ee  00000882  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text._Exit   00000004  0000084c  0000084c  000008e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
   4:	0c 94 24 04 	jmp	0x848	; 0x848 <__bad_interrupt>
   8:	0c 94 24 04 	jmp	0x848	; 0x848 <__bad_interrupt>
   c:	0c 94 24 04 	jmp	0x848	; 0x848 <__bad_interrupt>
  10:	0c 94 24 04 	jmp	0x848	; 0x848 <__bad_interrupt>
  14:	0c 94 24 04 	jmp	0x848	; 0x848 <__bad_interrupt>
  18:	0c 94 24 04 	jmp	0x848	; 0x848 <__bad_interrupt>
  1c:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__vector_7>
  20:	0c 94 43 02 	jmp	0x486	; 0x486 <__vector_8>
  24:	0c 94 1a 02 	jmp	0x434	; 0x434 <__vector_9>
  28:	0c 94 24 04 	jmp	0x848	; 0x848 <__bad_interrupt>
  2c:	0c 94 24 04 	jmp	0x848	; 0x848 <__bad_interrupt>
  30:	0c 94 24 04 	jmp	0x848	; 0x848 <__bad_interrupt>
  34:	0c 94 24 04 	jmp	0x848	; 0x848 <__bad_interrupt>
  38:	0c 94 24 04 	jmp	0x848	; 0x848 <__bad_interrupt>
  3c:	0c 94 24 04 	jmp	0x848	; 0x848 <__bad_interrupt>
  40:	0c 94 24 04 	jmp	0x848	; 0x848 <__bad_interrupt>
  44:	0c 94 24 04 	jmp	0x848	; 0x848 <__bad_interrupt>
  48:	0c 94 24 04 	jmp	0x848	; 0x848 <__bad_interrupt>
  4c:	0c 94 24 04 	jmp	0x848	; 0x848 <__bad_interrupt>
  50:	0c 94 24 04 	jmp	0x848	; 0x848 <__bad_interrupt>
  54:	aa 01       	movw	r20, r20
  56:	b0 01       	movw	r22, r0
  58:	b6 01       	movw	r22, r12
  5a:	bc 01       	movw	r22, r24
  5c:	c2 01       	movw	r24, r4
  5e:	c8 01       	movw	r24, r16
  60:	ce 01       	movw	r24, r28
  62:	d4 01       	movw	r26, r8
  64:	e8 01       	movw	r28, r16
  66:	ee 01       	movw	r28, r28
  68:	f4 01       	movw	r30, r8
  6a:	fa 01       	movw	r30, r20
  6c:	00 02       	muls	r16, r16
  6e:	06 02       	muls	r16, r22
  70:	0c 02       	muls	r16, r28
  72:	12 02       	muls	r17, r18

00000074 <.dinit>:
  74:	00 60       	ori	r16, 0x00	; 0
  76:	00 6b       	ori	r16, 0xB0	; 176
  78:	80 00       	.word	0x0080	; ????

0000007a <__ctors_end>:
  7a:	11 24       	eor	r1, r1
  7c:	1f be       	out	0x3f, r1	; 63
  7e:	cf e5       	ldi	r28, 0x5F	; 95
  80:	d8 e0       	ldi	r29, 0x08	; 8
  82:	de bf       	out	0x3e, r29	; 62
  84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
  86:	e4 e7       	ldi	r30, 0x74	; 116
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	17 c0       	rjmp	.+46     	; 0xbc <__do_clear_bss+0x8>
  8e:	b5 91       	lpm	r27, Z+
  90:	a5 91       	lpm	r26, Z+
  92:	35 91       	lpm	r19, Z+
  94:	25 91       	lpm	r18, Z+
  96:	05 91       	lpm	r16, Z+
  98:	07 fd       	sbrc	r16, 7
  9a:	0c c0       	rjmp	.+24     	; 0xb4 <__do_clear_bss>
  9c:	95 91       	lpm	r25, Z+
  9e:	85 91       	lpm	r24, Z+
  a0:	ef 01       	movw	r28, r30
  a2:	f9 2f       	mov	r31, r25
  a4:	e8 2f       	mov	r30, r24
  a6:	05 90       	lpm	r0, Z+
  a8:	0d 92       	st	X+, r0
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0x20>
  b0:	fe 01       	movw	r30, r28
  b2:	04 c0       	rjmp	.+8      	; 0xbc <__do_clear_bss+0x8>

000000b4 <__do_clear_bss>:
  b4:	1d 92       	st	X+, r1
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	e1 f7       	brne	.-8      	; 0xb4 <__do_clear_bss>
  bc:	e9 37       	cpi	r30, 0x79	; 121
  be:	f4 07       	cpc	r31, r20
  c0:	31 f7       	brne	.-52     	; 0x8e <__do_copy_data+0x8>
  c2:	0e 94 b8 03 	call	0x770	; 0x770 <main>
  c6:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <exit>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>

Disassembly of section .text:

00000848 <__bad_interrupt>:
 848:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.H_LCD_void_latchByte:

00000292 <H_LCD_void_latchByte>:
	_delay_ms(1);
	
}

static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
 292:	df 92       	push	r13
 294:	ef 92       	push	r14
 296:	ff 92       	push	r15
 298:	0f 93       	push	r16
 29a:	1f 93       	push	r17
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	d8 2e       	mov	r13, r24
	int p=7;
	for (int i=0;i<2;i++)
 2a2:	e1 2c       	mov	r14, r1
 2a4:	f1 2c       	mov	r15, r1
	
}

static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
	int p=7;
 2a6:	07 e0       	ldi	r16, 0x07	; 7
 2a8:	10 e0       	ldi	r17, 0x00	; 0
	for (int i=0;i<2;i++)
 2aa:	3c c0       	rjmp	.+120    	; 0x324 <H_LCD_void_latchByte+0x92>
	{
		for (int j=0;j<4;j++)
		{
			DIO_voidSetPinValue(PERIPHERAL_C_BASE,data_pins[j],READBIT(copy_u8Byte,p));
 2ac:	4d 2d       	mov	r20, r13
 2ae:	50 e0       	ldi	r21, 0x00	; 0
 2b0:	00 2e       	mov	r0, r16
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <H_LCD_void_latchByte+0x26>
 2b4:	55 95       	asr	r21
 2b6:	47 95       	ror	r20
 2b8:	0a 94       	dec	r0
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <H_LCD_void_latchByte+0x22>
 2bc:	41 70       	andi	r20, 0x01	; 1
 2be:	ce 01       	movw	r24, r28
 2c0:	0d 2e       	mov	r0, r29
 2c2:	00 0c       	add	r0, r0
 2c4:	aa 0b       	sbc	r26, r26
 2c6:	84 52       	subi	r24, 0x24	; 36
 2c8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ca:	af 4f       	sbci	r26, 0xFF	; 255
 2cc:	fc 01       	movw	r30, r24
 2ce:	64 91       	lpm	r22, Z
 2d0:	a7 fd       	sbrc	r26, 7
 2d2:	60 81       	ld	r22, Z
 2d4:	83 e3       	ldi	r24, 0x33	; 51
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
			p--;
 2dc:	01 50       	subi	r16, 0x01	; 1
 2de:	11 09       	sbc	r17, r1
static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
	int p=7;
	for (int i=0;i<2;i++)
	{
		for (int j=0;j<4;j++)
 2e0:	21 96       	adiw	r28, 0x01	; 1
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <H_LCD_void_latchByte+0x56>
 2e4:	c0 e0       	ldi	r28, 0x00	; 0
 2e6:	d0 e0       	ldi	r29, 0x00	; 0
 2e8:	c4 30       	cpi	r28, 0x04	; 4
 2ea:	d1 05       	cpc	r29, r1
 2ec:	fc f2       	brlt	.-66     	; 0x2ac <H_LCD_void_latchByte+0x1a>
		{
			DIO_voidSetPinValue(PERIPHERAL_C_BASE,data_pins[j],READBIT(copy_u8Byte,p));
			p--;
		}
		DIO_voidSetPinValue(PERIPHERAL_C_BASE,EN,1);
 2ee:	41 e0       	ldi	r20, 0x01	; 1
 2f0:	61 e0       	ldi	r22, 0x01	; 1
 2f2:	83 e3       	ldi	r24, 0x33	; 51
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fa:	89 ef       	ldi	r24, 0xF9	; 249
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <H_LCD_void_latchByte+0x6c>
 302:	00 c0       	rjmp	.+0      	; 0x304 <H_LCD_void_latchByte+0x72>
 304:	00 00       	nop
		_delay_ms(1);
		DIO_voidSetPinValue(PERIPHERAL_C_BASE,EN,0);
 306:	40 e0       	ldi	r20, 0x00	; 0
 308:	61 e0       	ldi	r22, 0x01	; 1
 30a:	83 e3       	ldi	r24, 0x33	; 51
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
 312:	81 ee       	ldi	r24, 0xE1	; 225
 314:	94 e0       	ldi	r25, 0x04	; 4
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <H_LCD_void_latchByte+0x84>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <H_LCD_void_latchByte+0x8a>
 31c:	00 00       	nop
}

static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
	int p=7;
	for (int i=0;i<2;i++)
 31e:	9f ef       	ldi	r25, 0xFF	; 255
 320:	e9 1a       	sub	r14, r25
 322:	f9 0a       	sbc	r15, r25
 324:	82 e0       	ldi	r24, 0x02	; 2
 326:	e8 16       	cp	r14, r24
 328:	f1 04       	cpc	r15, r1
 32a:	e4 f2       	brlt	.-72     	; 0x2e4 <H_LCD_void_latchByte+0x52>
		DIO_voidSetPinValue(PERIPHERAL_C_BASE,EN,1);
		_delay_ms(1);
		DIO_voidSetPinValue(PERIPHERAL_C_BASE,EN,0);
		_delay_ms(5);
	}
}
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	1f 91       	pop	r17
 332:	0f 91       	pop	r16
 334:	ff 90       	pop	r15
 336:	ef 90       	pop	r14
 338:	df 90       	pop	r13
 33a:	08 95       	ret

Disassembly of section .text.H_LCD_void_sendData:

00000724 <H_LCD_void_sendData>:
	H_LCD_void_sendCommand(0xc);
	_delay_ms(20);

}
void H_LCD_void_sendData(u8 copy_u8data )
{
 724:	cf 93       	push	r28
 726:	c8 2f       	mov	r28, r24
	//put RS(1)
	DIO_voidSetPinValue(PERIPHERAL_C_BASE,RS,1);
 728:	41 e0       	ldi	r20, 0x01	; 1
 72a:	60 e0       	ldi	r22, 0x00	; 0
 72c:	83 e3       	ldi	r24, 0x33	; 51
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	H_LCD_void_latchByte(copy_u8data);
 734:	8c 2f       	mov	r24, r28
 736:	0e 94 49 01 	call	0x292	; 0x292 <H_LCD_void_latchByte>
 73a:	89 ef       	ldi	r24, 0xF9	; 249
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	01 97       	sbiw	r24, 0x01	; 1
 740:	f1 f7       	brne	.-4      	; 0x73e <H_LCD_void_sendData+0x1a>
 742:	00 c0       	rjmp	.+0      	; 0x744 <H_LCD_void_sendData+0x20>
 744:	00 00       	nop
	_delay_ms(1);
	
}
 746:	cf 91       	pop	r28
 748:	08 95       	ret

Disassembly of section .text.H_LCD_void_sendCommand:

0000074a <H_LCD_void_sendCommand>:
void H_LCD_void_sendCommand(u8 copy_u8command)
{
 74a:	cf 93       	push	r28
 74c:	c8 2f       	mov	r28, r24
	//put RS(0)
	DIO_voidSetPinValue(PERIPHERAL_C_BASE,RS,0);
 74e:	40 e0       	ldi	r20, 0x00	; 0
 750:	60 e0       	ldi	r22, 0x00	; 0
 752:	83 e3       	ldi	r24, 0x33	; 51
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	H_LCD_void_latchByte(copy_u8command);
 75a:	8c 2f       	mov	r24, r28
 75c:	0e 94 49 01 	call	0x292	; 0x292 <H_LCD_void_latchByte>
 760:	89 ef       	ldi	r24, 0xF9	; 249
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	01 97       	sbiw	r24, 0x01	; 1
 766:	f1 f7       	brne	.-4      	; 0x764 <H_LCD_void_sendCommand+0x1a>
 768:	00 c0       	rjmp	.+0      	; 0x76a <H_LCD_void_sendCommand+0x20>
 76a:	00 00       	nop
	_delay_ms(1);
	
}
 76c:	cf 91       	pop	r28
 76e:	08 95       	ret

Disassembly of section .text.H_LCD_void_Init:

000001c4 <H_LCD_void_Init>:
 u8 Character4[] = { 0x01, 0x03, 0x05, 0x09, 0x09, 0x0B, 0x1B, 0x18 };
 u8 Character5[] = { 0x0A, 0x0A, 0x1F, 0x11, 0x11, 0x0E, 0x04, 0x04 };
 u8 Character6[] = { 0x00, 0x00, 0x0A, 0x00, 0x04, 0x11, 0x0E, 0x00 };
 u8 Character7[] = { 0x00, 0x0A, 0x1F, 0x1F, 0x0E, 0x04, 0x00, 0x00 };
void H_LCD_void_Init(void)
{
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
	EN_DIR(1);
 1c8:	41 e0       	ldi	r20, 0x01	; 1
 1ca:	61 e0       	ldi	r22, 0x01	; 1
 1cc:	83 e3       	ldi	r24, 0x33	; 51
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_voidSetPinDirection>
	RS_DIR(1);
 1d4:	41 e0       	ldi	r20, 0x01	; 1
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	83 e3       	ldi	r24, 0x33	; 51
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PERIPHERAL_C_BASE,EN,1);
 1e0:	41 e0       	ldi	r20, 0x01	; 1
 1e2:	61 e0       	ldi	r22, 0x01	; 1
 1e4:	83 e3       	ldi	r24, 0x33	; 51
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_voidSetPinDirection>
	for (int i=0;i<4;i++)
 1ec:	c0 e0       	ldi	r28, 0x00	; 0
 1ee:	d0 e0       	ldi	r29, 0x00	; 0
 1f0:	11 c0       	rjmp	.+34     	; 0x214 <H_LCD_void_Init+0x50>
	{
		DIO_voidSetPinDirection(PERIPHERAL_C_BASE,data_pins[i],1);	
 1f2:	ce 01       	movw	r24, r28
 1f4:	0d 2e       	mov	r0, r29
 1f6:	00 0c       	add	r0, r0
 1f8:	aa 0b       	sbc	r26, r26
 1fa:	84 52       	subi	r24, 0x24	; 36
 1fc:	9f 4f       	sbci	r25, 0xFF	; 255
 1fe:	af 4f       	sbci	r26, 0xFF	; 255
 200:	fc 01       	movw	r30, r24
 202:	64 91       	lpm	r22, Z
 204:	a7 fd       	sbrc	r26, 7
 206:	60 81       	ld	r22, Z
 208:	41 e0       	ldi	r20, 0x01	; 1
 20a:	83 e3       	ldi	r24, 0x33	; 51
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_voidSetPinDirection>
void H_LCD_void_Init(void)
{
	EN_DIR(1);
	RS_DIR(1);
	DIO_voidSetPinDirection(PERIPHERAL_C_BASE,EN,1);
	for (int i=0;i<4;i++)
 212:	21 96       	adiw	r28, 0x01	; 1
 214:	c4 30       	cpi	r28, 0x04	; 4
 216:	d1 05       	cpc	r29, r1
 218:	64 f3       	brlt	.-40     	; 0x1f2 <H_LCD_void_Init+0x2e>
	{
		DIO_voidSetPinDirection(PERIPHERAL_C_BASE,data_pins[i],1);	
	}
	DIO_voidSetPinValue(PERIPHERAL_C_BASE,RS,0);
 21a:	40 e0       	ldi	r20, 0x00	; 0
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	83 e3       	ldi	r24, 0x33	; 51
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	H_LCD_void_sendCommand(0x3);
 226:	83 e0       	ldi	r24, 0x03	; 3
 228:	0e 94 a5 03 	call	0x74a	; 0x74a <H_LCD_void_sendCommand>
 22c:	87 ee       	ldi	r24, 0xE7	; 231
 22e:	93 e0       	ldi	r25, 0x03	; 3
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <H_LCD_void_Init+0x6c>
 234:	00 c0       	rjmp	.+0      	; 0x236 <H_LCD_void_Init+0x72>
 236:	00 00       	nop
	_delay_ms(4);
	H_LCD_void_sendCommand(0x3);
 238:	83 e0       	ldi	r24, 0x03	; 3
 23a:	0e 94 a5 03 	call	0x74a	; 0x74a <H_LCD_void_sendCommand>
 23e:	87 ee       	ldi	r24, 0xE7	; 231
 240:	93 e0       	ldi	r25, 0x03	; 3
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <H_LCD_void_Init+0x7e>
 246:	00 c0       	rjmp	.+0      	; 0x248 <H_LCD_void_Init+0x84>
 248:	00 00       	nop
	_delay_ms(4);
	H_LCD_void_sendCommand(0x3);
 24a:	83 e0       	ldi	r24, 0x03	; 3
 24c:	0e 94 a5 03 	call	0x74a	; 0x74a <H_LCD_void_sendCommand>
 250:	87 ee       	ldi	r24, 0xE7	; 231
 252:	93 e0       	ldi	r25, 0x03	; 3
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <H_LCD_void_Init+0x90>
 258:	00 c0       	rjmp	.+0      	; 0x25a <H_LCD_void_Init+0x96>
 25a:	00 00       	nop
	_delay_ms(4);
	
	H_LCD_void_sendCommand(0x2);
 25c:	82 e0       	ldi	r24, 0x02	; 2
 25e:	0e 94 a5 03 	call	0x74a	; 0x74a <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(0x28);//display on off 0E
 262:	88 e2       	ldi	r24, 0x28	; 40
 264:	0e 94 a5 03 	call	0x74a	; 0x74a <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(0x08);
 268:	88 e0       	ldi	r24, 0x08	; 8
 26a:	0e 94 a5 03 	call	0x74a	; 0x74a <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(0x1);
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	0e 94 a5 03 	call	0x74a	; 0x74a <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(0x6);
 274:	86 e0       	ldi	r24, 0x06	; 6
 276:	0e 94 a5 03 	call	0x74a	; 0x74a <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(0xc);
 27a:	8c e0       	ldi	r24, 0x0C	; 12
 27c:	0e 94 a5 03 	call	0x74a	; 0x74a <H_LCD_void_sendCommand>
 280:	87 e8       	ldi	r24, 0x87	; 135
 282:	93 e1       	ldi	r25, 0x13	; 19
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <H_LCD_void_Init+0xc0>
 288:	00 c0       	rjmp	.+0      	; 0x28a <H_LCD_void_Init+0xc6>
 28a:	00 00       	nop
	_delay_ms(20);

}
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

Disassembly of section .text.H_LCD_void_sendString:

000005b2 <H_LCD_void_sendString>:
		_delay_ms(5);
	}
}

void H_LCD_void_sendString(const s8 * pstr)
{
 5b2:	cf 92       	push	r12
 5b4:	df 92       	push	r13
 5b6:	ef 92       	push	r14
 5b8:	cf 93       	push	r28
 5ba:	df 93       	push	r29
 5bc:	6b 01       	movw	r12, r22
 5be:	e8 2e       	mov	r14, r24
	int i=0;
 5c0:	c0 e0       	ldi	r28, 0x00	; 0
 5c2:	d0 e0       	ldi	r29, 0x00	; 0
	while(pstr[i] != '\0'){
 5c4:	03 c0       	rjmp	.+6      	; 0x5cc <H_LCD_void_sendString+0x1a>
		H_LCD_void_sendData(pstr[i]);
 5c6:	0e 94 92 03 	call	0x724	; 0x724 <H_LCD_void_sendData>
		i++;
 5ca:	21 96       	adiw	r28, 0x01	; 1
}

void H_LCD_void_sendString(const s8 * pstr)
{
	int i=0;
	while(pstr[i] != '\0'){
 5cc:	ae 2d       	mov	r26, r14
 5ce:	c6 01       	movw	r24, r12
 5d0:	8c 0f       	add	r24, r28
 5d2:	9d 1f       	adc	r25, r29
 5d4:	a1 1d       	adc	r26, r1
 5d6:	d7 fd       	sbrc	r29, 7
 5d8:	aa 95       	dec	r26
 5da:	fc 01       	movw	r30, r24
 5dc:	84 91       	lpm	r24, Z
 5de:	a7 fd       	sbrc	r26, 7
 5e0:	80 81       	ld	r24, Z
 5e2:	81 11       	cpse	r24, r1
 5e4:	f0 cf       	rjmp	.-32     	; 0x5c6 <H_LCD_void_sendString+0x14>
		H_LCD_void_sendData(pstr[i]);
		i++;
	}
	
}
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	ef 90       	pop	r14
 5ec:	df 90       	pop	r13
 5ee:	cf 90       	pop	r12
 5f0:	08 95       	ret

Disassembly of section .text.H_LCD_void_sendIntNum:

000000e0 <H_LCD_void_sendIntNum>:
void H_LCD_void_sendIntNum(s32 copy_s32Num)
{
  e0:	8f 92       	push	r8
  e2:	9f 92       	push	r9
  e4:	af 92       	push	r10
  e6:	bf 92       	push	r11
  e8:	cf 92       	push	r12
  ea:	df 92       	push	r13
  ec:	ef 92       	push	r14
  ee:	ff 92       	push	r15
  f0:	6b 01       	movw	r12, r22
  f2:	7c 01       	movw	r14, r24
	u8 data ;
	if (copy_s32Num >= 10){
  f4:	8a e0       	ldi	r24, 0x0A	; 10
  f6:	c8 16       	cp	r12, r24
  f8:	d1 04       	cpc	r13, r1
  fa:	e1 04       	cpc	r14, r1
  fc:	f1 04       	cpc	r15, r1
  fe:	0c f4       	brge	.+2      	; 0x102 <H_LCD_void_sendIntNum+0x22>
 100:	4c c0       	rjmp	.+152    	; 0x19a <H_LCD_void_sendIntNum+0xba>
		if (copy_s32Num>=100){
 102:	84 e6       	ldi	r24, 0x64	; 100
 104:	c8 16       	cp	r12, r24
 106:	d1 04       	cpc	r13, r1
 108:	e1 04       	cpc	r14, r1
 10a:	f1 04       	cpc	r15, r1
 10c:	7c f1       	brlt	.+94     	; 0x16c <H_LCD_void_sendIntNum+0x8c>
			if(copy_s32Num >= 1000){//%0.2f 4.50 0.5  4.5000
 10e:	88 ee       	ldi	r24, 0xE8	; 232
 110:	c8 16       	cp	r12, r24
 112:	83 e0       	ldi	r24, 0x03	; 3
 114:	d8 06       	cpc	r13, r24
 116:	e1 04       	cpc	r14, r1
 118:	f1 04       	cpc	r15, r1
 11a:	a4 f0       	brlt	.+40     	; 0x144 <H_LCD_void_sendIntNum+0x64>
				data = (copy_s32Num/1000)%10;//3555->3
 11c:	c7 01       	movw	r24, r14
 11e:	b6 01       	movw	r22, r12
 120:	28 ee       	ldi	r18, 0xE8	; 232
 122:	33 e0       	ldi	r19, 0x03	; 3
 124:	40 e0       	ldi	r20, 0x00	; 0
 126:	50 e0       	ldi	r21, 0x00	; 0
 128:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__divmodsi4>
 12c:	ca 01       	movw	r24, r20
 12e:	b9 01       	movw	r22, r18
 130:	2a e0       	ldi	r18, 0x0A	; 10
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	40 e0       	ldi	r20, 0x00	; 0
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__divmodsi4>
				H_LCD_void_sendData(data + 0x30);// add the number into its ascii
 13c:	80 e3       	ldi	r24, 0x30	; 48
 13e:	86 0f       	add	r24, r22
 140:	0e 94 92 03 	call	0x724	; 0x724 <H_LCD_void_sendData>
			}
			data = (copy_s32Num/100)%10;
 144:	c7 01       	movw	r24, r14
 146:	b6 01       	movw	r22, r12
 148:	24 e6       	ldi	r18, 0x64	; 100
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	40 e0       	ldi	r20, 0x00	; 0
 14e:	50 e0       	ldi	r21, 0x00	; 0
 150:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__divmodsi4>
 154:	ca 01       	movw	r24, r20
 156:	b9 01       	movw	r22, r18
 158:	2a e0       	ldi	r18, 0x0A	; 10
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	40 e0       	ldi	r20, 0x00	; 0
 15e:	50 e0       	ldi	r21, 0x00	; 0
 160:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__divmodsi4>
			H_LCD_void_sendData(data + 0x30);
 164:	80 e3       	ldi	r24, 0x30	; 48
 166:	86 0f       	add	r24, r22
 168:	0e 94 92 03 	call	0x724	; 0x724 <H_LCD_void_sendData>
		}
		data = (copy_s32Num/10)%10;//50
 16c:	0f 2e       	mov	r0, r31
 16e:	fa e0       	ldi	r31, 0x0A	; 10
 170:	8f 2e       	mov	r8, r31
 172:	91 2c       	mov	r9, r1
 174:	a1 2c       	mov	r10, r1
 176:	b1 2c       	mov	r11, r1
 178:	f0 2d       	mov	r31, r0
 17a:	c7 01       	movw	r24, r14
 17c:	b6 01       	movw	r22, r12
 17e:	a5 01       	movw	r20, r10
 180:	94 01       	movw	r18, r8
 182:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__divmodsi4>
 186:	ca 01       	movw	r24, r20
 188:	b9 01       	movw	r22, r18
 18a:	a5 01       	movw	r20, r10
 18c:	94 01       	movw	r18, r8
 18e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__divmodsi4>
		H_LCD_void_sendData(data + 0x30);
 192:	80 e3       	ldi	r24, 0x30	; 48
 194:	86 0f       	add	r24, r22
 196:	0e 94 92 03 	call	0x724	; 0x724 <H_LCD_void_sendData>
	}
	data = copy_s32Num %10;//5
 19a:	c7 01       	movw	r24, r14
 19c:	b6 01       	movw	r22, r12
 19e:	2a e0       	ldi	r18, 0x0A	; 10
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	40 e0       	ldi	r20, 0x00	; 0
 1a4:	50 e0       	ldi	r21, 0x00	; 0
 1a6:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__divmodsi4>
	H_LCD_void_sendData(data+0x30);
 1aa:	80 e3       	ldi	r24, 0x30	; 48
 1ac:	86 0f       	add	r24, r22
 1ae:	0e 94 92 03 	call	0x724	; 0x724 <H_LCD_void_sendData>
}
 1b2:	ff 90       	pop	r15
 1b4:	ef 90       	pop	r14
 1b6:	df 90       	pop	r13
 1b8:	cf 90       	pop	r12
 1ba:	bf 90       	pop	r11
 1bc:	af 90       	pop	r10
 1be:	9f 90       	pop	r9
 1c0:	8f 90       	pop	r8
 1c2:	08 95       	ret

Disassembly of section .text.SysInit:

000007d4 <SysInit>:
 */ 
#include "LoginSys.h"

void SysInit(void)
{
	H_LCD_void_Init();
 7d4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <H_LCD_void_Init>
	//configure the input capture pin as input
	DIO_voidSetPinDirection(PERIPHERAL_D_BASE,6,0);
 7d8:	40 e0       	ldi	r20, 0x00	; 0
 7da:	66 e0       	ldi	r22, 0x06	; 6
 7dc:	80 e3       	ldi	r24, 0x30	; 48
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_voidSetPinDirection>
	Ultrasonic_init();
 7e4:	0e 94 95 02 	call	0x52a	; 0x52a <Ultrasonic_init>
	//enable global interrupt 
	enable_GIE();	
 7e8:	0e 94 1a 04 	call	0x834	; 0x834 <enable_GIE>
 7ec:	08 95       	ret

Disassembly of section .text.Ultrasonic_edgeProcessing:

000005f2 <Ultrasonic_edgeProcessing>:
 * Description :
 * Callback function  that gets the high clock pulse time
 * the value is stored in global variable g_pulseTime
 */
void Ultrasonic_edgeProcessing(void){
	g_edgesCount++;
 5f2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <g_edgesCount>
 5f6:	8f 5f       	subi	r24, 0xFF	; 255
 5f8:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <g_edgesCount>
	if (g_edgesCount == 1){
 5fc:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <g_edgesCount>
 600:	81 30       	cpi	r24, 0x01	; 1
 602:	39 f4       	brne	.+14     	; 0x612 <Ultrasonic_edgeProcessing+0x20>

		/*get the time after the rising edge*/
		ICU_clearTimerValue();
 604:	0e 94 1e 04 	call	0x83c	; 0x83c <ICU_clearTimerValue>

		/*Detect the falling edge*/
		ICU_setEdgeDetectionType(FALLING);
 608:	80 e0       	ldi	r24, 0x00	; 0
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	0e 94 02 04 	call	0x804	; 0x804 <ICU_setEdgeDetectionType>
 610:	08 95       	ret
	}
	else if(g_edgesCount == 2){
 612:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <g_edgesCount>
 616:	82 30       	cpi	r24, 0x02	; 2
 618:	51 f4       	brne	.+20     	; 0x62e <Ultrasonic_edgeProcessing+0x3c>
		/*store high pulse time*/
		g_pulseTime = ICU_getInputCaptureValue();
 61a:	0e 94 21 04 	call	0x842	; 0x842 <ICU_getInputCaptureValue>
 61e:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <g_pulseTime+0x1>
 622:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <g_pulseTime>

		/*Detect the rising edge for future measurements*/
		ICU_setEdgeDetectionType(RISING);
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	0e 94 02 04 	call	0x804	; 0x804 <ICU_setEdgeDetectionType>
 62e:	08 95       	ret

Disassembly of section .text.Ultrasonic_init:

0000052a <Ultrasonic_init>:
 * initialize the ultrasonic sensor:
 * 	1- Set the trigger pin direction as output.
 * 	2- configure the input capture unit.
 * 	3- sets the callback function.
 */
void Ultrasonic_init(void){
 52a:	cf 93       	push	r28
 52c:	df 93       	push	r29
 52e:	00 d0       	rcall	.+0      	; 0x530 <Ultrasonic_init+0x6>
 530:	cd b7       	in	r28, 0x3d	; 61
 532:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(PERIPHERAL_A_BASE, 7, 1);
 534:	41 e0       	ldi	r20, 0x01	; 1
 536:	67 e0       	ldi	r22, 0x07	; 7
 538:	89 e3       	ldi	r24, 0x39	; 57
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_voidSetPinDirection>

	/*configure the input capture unit. */
	ICU_ConfigType icu_configuration ={
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	89 83       	std	Y+1, r24	; 0x01
 544:	82 e0       	ldi	r24, 0x02	; 2
 546:	8a 83       	std	Y+2, r24	; 0x02
		.prescaler_value =TIMER1_PRESCALER_8,
		.edge_select = RISING
	};

	/*initialize the ICU*/
	ICU_init(&icu_configuration);
 548:	ce 01       	movw	r24, r28
 54a:	01 96       	adiw	r24, 0x01	; 1
 54c:	0e 94 64 03 	call	0x6c8	; 0x6c8 <ICU_init>

	/*set the callback function and enable inturrpt.*/
	Timer1_EnableInt(INPUT_CAPTURE_IE);
 550:	83 e0       	ldi	r24, 0x03	; 3
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	0e 94 4c 03 	call	0x698	; 0x698 <Timer1_EnableInt>
	Timer1_EXTI_setCallBack(Ultrasonic_edgeProcessing,INPUT_CAPTURE_IE);
 558:	63 e0       	ldi	r22, 0x03	; 3
 55a:	70 e0       	ldi	r23, 0x00	; 0
 55c:	89 ef       	ldi	r24, 0xF9	; 249
 55e:	92 e0       	ldi	r25, 0x02	; 2
 560:	0e 94 18 03 	call	0x630	; 0x630 <Timer1_EXTI_setCallBack>
}
 564:	0f 90       	pop	r0
 566:	0f 90       	pop	r0
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
 56c:	08 95       	ret

Disassembly of section .text.Ultrasonic_Trigger:

00000794 <Ultrasonic_Trigger>:
/*
 * Description:
 * Triggers the ultrasonic sensor by sending a 10us high pulse through trigger pin.
 */
void Ultrasonic_Trigger(void){
	DIO_voidSetPinValue(PERIPHERAL_A_BASE, 7, 1);
 794:	41 e0       	ldi	r20, 0x01	; 1
 796:	67 e0       	ldi	r22, 0x07	; 7
 798:	89 e3       	ldi	r24, 0x39	; 57
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7a0:	83 e0       	ldi	r24, 0x03	; 3
 7a2:	8a 95       	dec	r24
 7a4:	f1 f7       	brne	.-4      	; 0x7a2 <Ultrasonic_Trigger+0xe>
 7a6:	00 00       	nop
	_delay_us(10);
	DIO_voidSetPinValue(PERIPHERAL_A_BASE, 7, 0);
 7a8:	40 e0       	ldi	r20, 0x00	; 0
 7aa:	67 e0       	ldi	r22, 0x07	; 7
 7ac:	89 e3       	ldi	r24, 0x39	; 57
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetPinValue>
 7b4:	08 95       	ret

Disassembly of section .text.Ultrasonic_readDistance:

00000668 <Ultrasonic_readDistance>:
 * 	1- triggers the ultrasonic sensor.
 * 	2- reads the high pulse time and returns the distance.
 * */
u16 Ultrasonic_readDistance(void){
	/*start the measurements by the ICU*/
	Ultrasonic_Trigger();
 668:	0e 94 ca 03 	call	0x794	; 0x794 <Ultrasonic_Trigger>

	/*resets the global edges count to start a new*/
	if(g_edgesCount >= NUM_OF_EDGES_TO_DETECT){
 66c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <g_edgesCount>
 670:	82 30       	cpi	r24, 0x02	; 2
 672:	10 f0       	brcs	.+4      	; 0x678 <Ultrasonic_readDistance+0x10>
		g_edgesCount = 0;
 674:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <g_edgesCount>
	}

	/*calculate and return the distance in centimeters */
	return (g_pulseTime/58 + 1); /*(adding 1 for value correction)*/
 678:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <g_pulseTime>
 67c:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <g_pulseTime+0x1>
 680:	af e9       	ldi	r26, 0x9F	; 159
 682:	b6 e4       	ldi	r27, 0x46	; 70
 684:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__umulhisi3>
 688:	92 95       	swap	r25
 68a:	82 95       	swap	r24
 68c:	8f 70       	andi	r24, 0x0F	; 15
 68e:	89 27       	eor	r24, r25
 690:	9f 70       	andi	r25, 0x0F	; 15
 692:	89 27       	eor	r24, r25
}
 694:	01 96       	adiw	r24, 0x01	; 1
 696:	08 95       	ret

Disassembly of section .text.main:

00000770 <main>:
 */ 
#include "HAL/Longin_sys/LoginSys.h"
int main(void)
{
	u16 distance;
	SysInit();
 770:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <SysInit>
    while(1)
    {
		H_LCD_void_sendString("distance is: ");
 774:	6e ec       	ldi	r22, 0xCE	; 206
 776:	70 e0       	ldi	r23, 0x00	; 0
 778:	80 e0       	ldi	r24, 0x00	; 0
 77a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <H_LCD_void_sendString>
		H_LCD_void_sendIntNum(Ultrasonic_readDistance());
 77e:	0e 94 34 03 	call	0x668	; 0x668 <Ultrasonic_readDistance>
 782:	bc 01       	movw	r22, r24
 784:	80 e0       	ldi	r24, 0x00	; 0
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	0e 94 70 00 	call	0xe0	; 0xe0 <H_LCD_void_sendIntNum>
		H_LCD_void_sendCommand(OVER_WRITE);
 78c:	80 e8       	ldi	r24, 0x80	; 128
 78e:	0e 94 a5 03 	call	0x74a	; 0x74a <H_LCD_void_sendCommand>
 792:	f0 cf       	rjmp	.-32     	; 0x774 <main+0x4>

Disassembly of section .text.DIO_voidSetPinDirection:

0000033c <DIO_voidSetPinDirection>:
 *
 * Created: 10/25/2023 4:07:36 PM
 *  Author: Sarah saeed
 */ 
#include "DIO_interface.h"
void DIO_voidSetPinDirection( GPIO_peripherals *ptr, u8 Copy_u8PinId, u8 Copy_u8Direction){
 33c:	0f 93       	push	r16
 33e:	1f 93       	push	r17

	switch (Copy_u8PinId){
 340:	06 2f       	mov	r16, r22
 342:	10 e0       	ldi	r17, 0x00	; 0
 344:	08 30       	cpi	r16, 0x08	; 8
 346:	11 05       	cpc	r17, r1
 348:	a0 f5       	brcc	.+104    	; 0x3b2 <DIO_voidSetPinDirection+0x76>
 34a:	f8 01       	movw	r30, r16
 34c:	e6 5d       	subi	r30, 0xD6	; 214
 34e:	ff 4f       	sbci	r31, 0xFF	; 255
 350:	0c 94 14 04 	jmp	0x828	; 0x828 <__tablejump2__>
		case 0:
		ptr->DDR.Bit.B0 = Copy_u8Direction;
 354:	fc 01       	movw	r30, r24
 356:	21 81       	ldd	r18, Z+1	; 0x01
 358:	40 fb       	bst	r20, 0
 35a:	20 f9       	bld	r18, 0
 35c:	21 83       	std	Z+1, r18	; 0x01
		break;
 35e:	29 c0       	rjmp	.+82     	; 0x3b2 <DIO_voidSetPinDirection+0x76>
		case 1:
		ptr->DDR.Bit.B1 = Copy_u8Direction;
 360:	fc 01       	movw	r30, r24
 362:	21 81       	ldd	r18, Z+1	; 0x01
 364:	40 fb       	bst	r20, 0
 366:	21 f9       	bld	r18, 1
 368:	21 83       	std	Z+1, r18	; 0x01
		break;
 36a:	23 c0       	rjmp	.+70     	; 0x3b2 <DIO_voidSetPinDirection+0x76>
		case 2:
		ptr->DDR.Bit.B2 = Copy_u8Direction;
 36c:	fc 01       	movw	r30, r24
 36e:	21 81       	ldd	r18, Z+1	; 0x01
 370:	40 fb       	bst	r20, 0
 372:	22 f9       	bld	r18, 2
 374:	21 83       	std	Z+1, r18	; 0x01
		break;
 376:	1d c0       	rjmp	.+58     	; 0x3b2 <DIO_voidSetPinDirection+0x76>
		case 3:
		ptr->DDR.Bit.B3 = Copy_u8Direction;
 378:	fc 01       	movw	r30, r24
 37a:	21 81       	ldd	r18, Z+1	; 0x01
 37c:	40 fb       	bst	r20, 0
 37e:	23 f9       	bld	r18, 3
 380:	21 83       	std	Z+1, r18	; 0x01
		break;
 382:	17 c0       	rjmp	.+46     	; 0x3b2 <DIO_voidSetPinDirection+0x76>
		case 4:
		ptr->DDR.Bit.B4 = Copy_u8Direction;
 384:	fc 01       	movw	r30, r24
 386:	21 81       	ldd	r18, Z+1	; 0x01
 388:	40 fb       	bst	r20, 0
 38a:	24 f9       	bld	r18, 4
 38c:	21 83       	std	Z+1, r18	; 0x01
		break;
 38e:	11 c0       	rjmp	.+34     	; 0x3b2 <DIO_voidSetPinDirection+0x76>
		case 5:
		ptr->DDR.Bit.B5 = Copy_u8Direction;
 390:	fc 01       	movw	r30, r24
 392:	21 81       	ldd	r18, Z+1	; 0x01
 394:	40 fb       	bst	r20, 0
 396:	25 f9       	bld	r18, 5
 398:	21 83       	std	Z+1, r18	; 0x01
		break;
 39a:	0b c0       	rjmp	.+22     	; 0x3b2 <DIO_voidSetPinDirection+0x76>
		case 6:
		ptr->DDR.Bit.B6= Copy_u8Direction;
 39c:	fc 01       	movw	r30, r24
 39e:	21 81       	ldd	r18, Z+1	; 0x01
 3a0:	40 fb       	bst	r20, 0
 3a2:	26 f9       	bld	r18, 6
 3a4:	21 83       	std	Z+1, r18	; 0x01
		break;
 3a6:	05 c0       	rjmp	.+10     	; 0x3b2 <DIO_voidSetPinDirection+0x76>
		case 7:
		ptr->DDR.Bit.B7 = Copy_u8Direction;
 3a8:	fc 01       	movw	r30, r24
 3aa:	21 81       	ldd	r18, Z+1	; 0x01
 3ac:	40 fb       	bst	r20, 0
 3ae:	27 f9       	bld	r18, 7
 3b0:	21 83       	std	Z+1, r18	; 0x01
		break;
		default:
		break;
	}
}
 3b2:	1f 91       	pop	r17
 3b4:	0f 91       	pop	r16
 3b6:	08 95       	ret

Disassembly of section .text.DIO_voidSetPinValue:

000003b8 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(GPIO_peripherals *ptr, u8 Copy_u8PinId, u8 Copy_u8Value){
 3b8:	0f 93       	push	r16
 3ba:	1f 93       	push	r17
	switch (Copy_u8PinId){
 3bc:	06 2f       	mov	r16, r22
 3be:	10 e0       	ldi	r17, 0x00	; 0
 3c0:	08 30       	cpi	r16, 0x08	; 8
 3c2:	11 05       	cpc	r17, r1
 3c4:	a0 f5       	brcc	.+104    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 3c6:	f8 01       	movw	r30, r16
 3c8:	ee 5c       	subi	r30, 0xCE	; 206
 3ca:	ff 4f       	sbci	r31, 0xFF	; 255
 3cc:	0c 94 14 04 	jmp	0x828	; 0x828 <__tablejump2__>
		case 0:
		ptr->PORT.Bit.B0 = Copy_u8Value;
 3d0:	fc 01       	movw	r30, r24
 3d2:	22 81       	ldd	r18, Z+2	; 0x02
 3d4:	40 fb       	bst	r20, 0
 3d6:	20 f9       	bld	r18, 0
 3d8:	22 83       	std	Z+2, r18	; 0x02
		break;
 3da:	29 c0       	rjmp	.+82     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
		case 1:
		ptr->PORT.Bit.B1 = Copy_u8Value;
 3dc:	fc 01       	movw	r30, r24
 3de:	22 81       	ldd	r18, Z+2	; 0x02
 3e0:	40 fb       	bst	r20, 0
 3e2:	21 f9       	bld	r18, 1
 3e4:	22 83       	std	Z+2, r18	; 0x02
		break;
 3e6:	23 c0       	rjmp	.+70     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
		case 2:
		ptr->PORT.Bit.B2 = Copy_u8Value;
 3e8:	fc 01       	movw	r30, r24
 3ea:	22 81       	ldd	r18, Z+2	; 0x02
 3ec:	40 fb       	bst	r20, 0
 3ee:	22 f9       	bld	r18, 2
 3f0:	22 83       	std	Z+2, r18	; 0x02
		break;
 3f2:	1d c0       	rjmp	.+58     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
		case 3:
		ptr->PORT.Bit.B3 = Copy_u8Value;
 3f4:	fc 01       	movw	r30, r24
 3f6:	22 81       	ldd	r18, Z+2	; 0x02
 3f8:	40 fb       	bst	r20, 0
 3fa:	23 f9       	bld	r18, 3
 3fc:	22 83       	std	Z+2, r18	; 0x02
		break;
 3fe:	17 c0       	rjmp	.+46     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
		case 4:
		ptr->PORT.Bit.B4 = Copy_u8Value;
 400:	fc 01       	movw	r30, r24
 402:	22 81       	ldd	r18, Z+2	; 0x02
 404:	40 fb       	bst	r20, 0
 406:	24 f9       	bld	r18, 4
 408:	22 83       	std	Z+2, r18	; 0x02
		break;
 40a:	11 c0       	rjmp	.+34     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
		case 5:
		ptr->PORT.Bit.B5 = Copy_u8Value;
 40c:	fc 01       	movw	r30, r24
 40e:	22 81       	ldd	r18, Z+2	; 0x02
 410:	40 fb       	bst	r20, 0
 412:	25 f9       	bld	r18, 5
 414:	22 83       	std	Z+2, r18	; 0x02
		break;
 416:	0b c0       	rjmp	.+22     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
		case 6:
		ptr->PORT.Bit.B6 = Copy_u8Value;
 418:	fc 01       	movw	r30, r24
 41a:	22 81       	ldd	r18, Z+2	; 0x02
 41c:	40 fb       	bst	r20, 0
 41e:	26 f9       	bld	r18, 6
 420:	22 83       	std	Z+2, r18	; 0x02
		break;
 422:	05 c0       	rjmp	.+10     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
		case 7:
		ptr->PORT.Bit.B7 = Copy_u8Value;
 424:	fc 01       	movw	r30, r24
 426:	22 81       	ldd	r18, Z+2	; 0x02
 428:	40 fb       	bst	r20, 0
 42a:	27 f9       	bld	r18, 7
 42c:	22 83       	std	Z+2, r18	; 0x02
		break;
		default:
		break;
	}

}
 42e:	1f 91       	pop	r17
 430:	0f 91       	pop	r16
 432:	08 95       	ret

Disassembly of section .text.enable_GIE:

00000834 <enable_GIE>:
 *  Author: Sarah saeed
 */ 
#include "GIE_interface.h"
void enable_GIE()
{
	SETBIT(SREG_BASE,7);	
 834:	8f b7       	in	r24, 0x3f	; 63
 836:	80 68       	ori	r24, 0x80	; 128
 838:	8f bf       	out	0x3f, r24	; 63
 83a:	08 95       	ret

Disassembly of section .text.ICU_init:

000006c8 <ICU_init>:
	//handle compare mode1A,1B
	TCCR1A=(TCCR1A&0b11001111)| ((input->com1B)<<4);
	TCCR1A=(TCCR1A&0b11001111)| ((input->com1A)<<6);
}
void ICU_init(ICU_ConfigType * a_configPtr)
{
 6c8:	fc 01       	movw	r30, r24
	/*initially the timer value is 0*/
	TCNT1=0;
 6ca:	1d bc       	out	0x2d, r1	; 45
 6cc:	1c bc       	out	0x2c, r1	; 44
	/*initially the ICR1 value is 0*/
	ICR1=0;
 6ce:	17 bc       	out	0x27, r1	; 39
 6d0:	16 bc       	out	0x26, r1	; 38
	/*force output compare to nonPwm mode*/
	TCCR1A=(1<<FOC1A)|(1<<FOC1B);
 6d2:	8c e0       	ldi	r24, 0x0C	; 12
 6d4:	8f bd       	out	0x2f, r24	; 47
	/*set the edge*/
	TCCR1B=(TCCR1B&10111111)|((a_configPtr->edge_select)<<6);
 6d6:	4e b5       	in	r20, 0x2e	; 46
 6d8:	90 81       	ld	r25, Z
 6da:	80 e4       	ldi	r24, 0x40	; 64
 6dc:	98 9f       	mul	r25, r24
 6de:	90 01       	movw	r18, r0
 6e0:	11 24       	eor	r1, r1
 6e2:	94 2f       	mov	r25, r20
 6e4:	97 78       	andi	r25, 0x87	; 135
 6e6:	29 2b       	or	r18, r25
 6e8:	2e bd       	out	0x2e, r18	; 46
	/*set prescaler*/
	TCCR1B=(TCCR1B&0b11111000)| (a_configPtr->prescaler_value);
 6ea:	8e b5       	in	r24, 0x2e	; 46
 6ec:	91 81       	ldd	r25, Z+1	; 0x01
 6ee:	88 7f       	andi	r24, 0xF8	; 248
 6f0:	89 2b       	or	r24, r25
 6f2:	8e bd       	out	0x2e, r24	; 46
 6f4:	08 95       	ret

Disassembly of section .text.ICU_setEdgeDetectionType:

00000804 <ICU_setEdgeDetectionType>:
	
}
void ICU_setEdgeDetectionType(icu_trigger a_edgeType){
	if(a_edgeType == RISING){
 804:	81 30       	cpi	r24, 0x01	; 1
 806:	21 f4       	brne	.+8      	; 0x810 <ICU_setEdgeDetectionType+0xc>
		SETBIT(TCCR1B,ICES1);
 808:	8e b5       	in	r24, 0x2e	; 46
 80a:	80 64       	ori	r24, 0x40	; 64
 80c:	8e bd       	out	0x2e, r24	; 46
 80e:	08 95       	ret
	}
	else{
		CLRBIT(TCCR1B,ICES1);
 810:	8e b5       	in	r24, 0x2e	; 46
 812:	8f 7b       	andi	r24, 0xBF	; 191
 814:	8e bd       	out	0x2e, r24	; 46
 816:	08 95       	ret

Disassembly of section .text.ICU_clearTimerValue:

0000083c <ICU_clearTimerValue>:
	}
}
void ICU_clearTimerValue(void){
	TCNT1 = 0;
 83c:	1d bc       	out	0x2d, r1	; 45
 83e:	1c bc       	out	0x2c, r1	; 44
 840:	08 95       	ret

Disassembly of section .text.ICU_getInputCaptureValue:

00000842 <ICU_getInputCaptureValue>:
}
u16 ICU_getInputCaptureValue(void){
	return ICR1;
 842:	86 b5       	in	r24, 0x26	; 38
 844:	97 b5       	in	r25, 0x27	; 39
}
 846:	08 95       	ret

Disassembly of section .text.Timer1_EnableInt:

00000698 <Timer1_EnableInt>:
	//handle mode
	TCCR1A=(TCCR1A&0b11111100)| (input->wave_generation_mode & 0b0011);
	TCCR1B=(TCCR1B&0b11100111)| ((input->wave_generation_mode & 0b1100)<<1);
	//handle compare mode1A,1B
	TCCR1A=(TCCR1A&0b11001111)| ((input->com1B)<<4);
	TCCR1A=(TCCR1A&0b11001111)| ((input->com1A)<<6);
 698:	81 30       	cpi	r24, 0x01	; 1
 69a:	51 f0       	breq	.+20     	; 0x6b0 <Timer1_EnableInt+0x18>
 69c:	28 f0       	brcs	.+10     	; 0x6a8 <Timer1_EnableInt+0x10>
 69e:	82 30       	cpi	r24, 0x02	; 2
 6a0:	59 f0       	breq	.+22     	; 0x6b8 <Timer1_EnableInt+0x20>
 6a2:	83 30       	cpi	r24, 0x03	; 3
 6a4:	69 f0       	breq	.+26     	; 0x6c0 <Timer1_EnableInt+0x28>
 6a6:	08 95       	ret
 6a8:	89 b7       	in	r24, 0x39	; 57
 6aa:	81 60       	ori	r24, 0x01	; 1
 6ac:	89 bf       	out	0x39, r24	; 57
 6ae:	08 95       	ret
 6b0:	89 b7       	in	r24, 0x39	; 57
 6b2:	88 60       	ori	r24, 0x08	; 8
 6b4:	89 bf       	out	0x39, r24	; 57
 6b6:	08 95       	ret
 6b8:	89 b7       	in	r24, 0x39	; 57
 6ba:	80 61       	ori	r24, 0x10	; 16
 6bc:	89 bf       	out	0x39, r24	; 57
 6be:	08 95       	ret
 6c0:	89 b7       	in	r24, 0x39	; 57
 6c2:	80 62       	ori	r24, 0x20	; 32
 6c4:	89 bf       	out	0x39, r24	; 57
 6c6:	08 95       	ret

Disassembly of section .text.Timer1_EXTI_setCallBack:

00000630 <Timer1_EXTI_setCallBack>:
 630:	61 30       	cpi	r22, 0x01	; 1
 632:	59 f0       	breq	.+22     	; 0x64a <Timer1_EXTI_setCallBack+0x1a>
 634:	28 f0       	brcs	.+10     	; 0x640 <Timer1_EXTI_setCallBack+0x10>
 636:	62 30       	cpi	r22, 0x02	; 2
 638:	69 f0       	breq	.+26     	; 0x654 <Timer1_EXTI_setCallBack+0x24>
 63a:	63 30       	cpi	r22, 0x03	; 3
 63c:	81 f0       	breq	.+32     	; 0x65e <Timer1_EXTI_setCallBack+0x2e>
 63e:	08 95       	ret
 640:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 644:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 648:	08 95       	ret
 64a:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <_edata+0x3>
 64e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <_edata+0x2>
 652:	08 95       	ret
 654:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <_edata+0x5>
 658:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <_edata+0x4>
 65c:	08 95       	ret
 65e:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <_edata+0x7>
 662:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <_edata+0x6>
 666:	08 95       	ret

Disassembly of section .text.__vector_9:

00000434 <__vector_9>:
 434:	1f 92       	push	r1
 436:	0f 92       	push	r0
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	0f 92       	push	r0
 43c:	11 24       	eor	r1, r1
 43e:	2f 93       	push	r18
 440:	3f 93       	push	r19
 442:	4f 93       	push	r20
 444:	5f 93       	push	r21
 446:	6f 93       	push	r22
 448:	7f 93       	push	r23
 44a:	8f 93       	push	r24
 44c:	9f 93       	push	r25
 44e:	af 93       	push	r26
 450:	bf 93       	push	r27
 452:	ef 93       	push	r30
 454:	ff 93       	push	r31
 456:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <_edata>
 45a:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <_edata+0x1>
 45e:	30 97       	sbiw	r30, 0x00	; 0
 460:	09 f0       	breq	.+2      	; 0x464 <__vector_9+0x30>
 462:	09 95       	icall
 464:	ff 91       	pop	r31
 466:	ef 91       	pop	r30
 468:	bf 91       	pop	r27
 46a:	af 91       	pop	r26
 46c:	9f 91       	pop	r25
 46e:	8f 91       	pop	r24
 470:	7f 91       	pop	r23
 472:	6f 91       	pop	r22
 474:	5f 91       	pop	r21
 476:	4f 91       	pop	r20
 478:	3f 91       	pop	r19
 47a:	2f 91       	pop	r18
 47c:	0f 90       	pop	r0
 47e:	0f be       	out	0x3f, r0	; 63
 480:	0f 90       	pop	r0
 482:	1f 90       	pop	r1
 484:	18 95       	reti

Disassembly of section .text.__vector_8:

00000486 <__vector_8>:
 486:	1f 92       	push	r1
 488:	0f 92       	push	r0
 48a:	0f b6       	in	r0, 0x3f	; 63
 48c:	0f 92       	push	r0
 48e:	11 24       	eor	r1, r1
 490:	2f 93       	push	r18
 492:	3f 93       	push	r19
 494:	4f 93       	push	r20
 496:	5f 93       	push	r21
 498:	6f 93       	push	r22
 49a:	7f 93       	push	r23
 49c:	8f 93       	push	r24
 49e:	9f 93       	push	r25
 4a0:	af 93       	push	r26
 4a2:	bf 93       	push	r27
 4a4:	ef 93       	push	r30
 4a6:	ff 93       	push	r31
 4a8:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <_edata+0x2>
 4ac:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <_edata+0x3>
 4b0:	30 97       	sbiw	r30, 0x00	; 0
 4b2:	09 f0       	breq	.+2      	; 0x4b6 <__vector_8+0x30>
 4b4:	09 95       	icall
 4b6:	ff 91       	pop	r31
 4b8:	ef 91       	pop	r30
 4ba:	bf 91       	pop	r27
 4bc:	af 91       	pop	r26
 4be:	9f 91       	pop	r25
 4c0:	8f 91       	pop	r24
 4c2:	7f 91       	pop	r23
 4c4:	6f 91       	pop	r22
 4c6:	5f 91       	pop	r21
 4c8:	4f 91       	pop	r20
 4ca:	3f 91       	pop	r19
 4cc:	2f 91       	pop	r18
 4ce:	0f 90       	pop	r0
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	0f 90       	pop	r0
 4d4:	1f 90       	pop	r1
 4d6:	18 95       	reti

Disassembly of section .text.__vector_7:

000004d8 <__vector_7>:
 4d8:	1f 92       	push	r1
 4da:	0f 92       	push	r0
 4dc:	0f b6       	in	r0, 0x3f	; 63
 4de:	0f 92       	push	r0
 4e0:	11 24       	eor	r1, r1
 4e2:	2f 93       	push	r18
 4e4:	3f 93       	push	r19
 4e6:	4f 93       	push	r20
 4e8:	5f 93       	push	r21
 4ea:	6f 93       	push	r22
 4ec:	7f 93       	push	r23
 4ee:	8f 93       	push	r24
 4f0:	9f 93       	push	r25
 4f2:	af 93       	push	r26
 4f4:	bf 93       	push	r27
 4f6:	ef 93       	push	r30
 4f8:	ff 93       	push	r31
 4fa:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <_edata+0x4>
 4fe:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <_edata+0x5>
 502:	30 97       	sbiw	r30, 0x00	; 0
 504:	09 f0       	breq	.+2      	; 0x508 <__vector_7+0x30>
 506:	09 95       	icall
 508:	ff 91       	pop	r31
 50a:	ef 91       	pop	r30
 50c:	bf 91       	pop	r27
 50e:	af 91       	pop	r26
 510:	9f 91       	pop	r25
 512:	8f 91       	pop	r24
 514:	7f 91       	pop	r23
 516:	6f 91       	pop	r22
 518:	5f 91       	pop	r21
 51a:	4f 91       	pop	r20
 51c:	3f 91       	pop	r19
 51e:	2f 91       	pop	r18
 520:	0f 90       	pop	r0
 522:	0f be       	out	0x3f, r0	; 63
 524:	0f 90       	pop	r0
 526:	1f 90       	pop	r1
 528:	18 95       	reti

Disassembly of section .text.libgcc.div:

000006f6 <__divmodsi4>:
 6f6:	05 2e       	mov	r0, r21
 6f8:	97 fb       	bst	r25, 7
 6fa:	1e f4       	brtc	.+6      	; 0x702 <__divmodsi4+0xc>
 6fc:	00 94       	com	r0
 6fe:	0e 94 0c 04 	call	0x818	; 0x818 <__negsi2>
 702:	57 fd       	sbrc	r21, 7
 704:	07 d0       	rcall	.+14     	; 0x714 <__divmodsi4_neg2>
 706:	0e 94 b7 02 	call	0x56e	; 0x56e <__udivmodsi4>
 70a:	07 fc       	sbrc	r0, 7
 70c:	03 d0       	rcall	.+6      	; 0x714 <__divmodsi4_neg2>
 70e:	4e f4       	brtc	.+18     	; 0x722 <__divmodsi4_exit>
 710:	0c 94 0c 04 	jmp	0x818	; 0x818 <__negsi2>

00000714 <__divmodsi4_neg2>:
 714:	50 95       	com	r21
 716:	40 95       	com	r20
 718:	30 95       	com	r19
 71a:	21 95       	neg	r18
 71c:	3f 4f       	sbci	r19, 0xFF	; 255
 71e:	4f 4f       	sbci	r20, 0xFF	; 255
 720:	5f 4f       	sbci	r21, 0xFF	; 255

00000722 <__divmodsi4_exit>:
 722:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000818 <__negsi2>:
 818:	90 95       	com	r25
 81a:	80 95       	com	r24
 81c:	70 95       	com	r23
 81e:	61 95       	neg	r22
 820:	7f 4f       	sbci	r23, 0xFF	; 255
 822:	8f 4f       	sbci	r24, 0xFF	; 255
 824:	9f 4f       	sbci	r25, 0xFF	; 255
 826:	08 95       	ret

Disassembly of section .text.libgcc:

00000828 <__tablejump2__>:
 828:	ee 0f       	add	r30, r30
 82a:	ff 1f       	adc	r31, r31
 82c:	05 90       	lpm	r0, Z+
 82e:	f4 91       	lpm	r31, Z
 830:	e0 2d       	mov	r30, r0
 832:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

000007b6 <__umulhisi3>:
 7b6:	a2 9f       	mul	r26, r18
 7b8:	b0 01       	movw	r22, r0
 7ba:	b3 9f       	mul	r27, r19
 7bc:	c0 01       	movw	r24, r0
 7be:	a3 9f       	mul	r26, r19
 7c0:	70 0d       	add	r23, r0
 7c2:	81 1d       	adc	r24, r1
 7c4:	11 24       	eor	r1, r1
 7c6:	91 1d       	adc	r25, r1
 7c8:	b2 9f       	mul	r27, r18
 7ca:	70 0d       	add	r23, r0
 7cc:	81 1d       	adc	r24, r1
 7ce:	11 24       	eor	r1, r1
 7d0:	91 1d       	adc	r25, r1
 7d2:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000056e <__udivmodsi4>:
 56e:	a1 e2       	ldi	r26, 0x21	; 33
 570:	1a 2e       	mov	r1, r26
 572:	aa 1b       	sub	r26, r26
 574:	bb 1b       	sub	r27, r27
 576:	fd 01       	movw	r30, r26
 578:	0d c0       	rjmp	.+26     	; 0x594 <__udivmodsi4_ep>

0000057a <__udivmodsi4_loop>:
 57a:	aa 1f       	adc	r26, r26
 57c:	bb 1f       	adc	r27, r27
 57e:	ee 1f       	adc	r30, r30
 580:	ff 1f       	adc	r31, r31
 582:	a2 17       	cp	r26, r18
 584:	b3 07       	cpc	r27, r19
 586:	e4 07       	cpc	r30, r20
 588:	f5 07       	cpc	r31, r21
 58a:	20 f0       	brcs	.+8      	; 0x594 <__udivmodsi4_ep>
 58c:	a2 1b       	sub	r26, r18
 58e:	b3 0b       	sbc	r27, r19
 590:	e4 0b       	sbc	r30, r20
 592:	f5 0b       	sbc	r31, r21

00000594 <__udivmodsi4_ep>:
 594:	66 1f       	adc	r22, r22
 596:	77 1f       	adc	r23, r23
 598:	88 1f       	adc	r24, r24
 59a:	99 1f       	adc	r25, r25
 59c:	1a 94       	dec	r1
 59e:	69 f7       	brne	.-38     	; 0x57a <__udivmodsi4_loop>
 5a0:	60 95       	com	r22
 5a2:	70 95       	com	r23
 5a4:	80 95       	com	r24
 5a6:	90 95       	com	r25
 5a8:	9b 01       	movw	r18, r22
 5aa:	ac 01       	movw	r20, r24
 5ac:	bd 01       	movw	r22, r26
 5ae:	cf 01       	movw	r24, r30
 5b0:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000850 <_fini>:
 850:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000852 <__funcs_on_exit>:
 852:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000854 <__simulator_exit>:
 854:	08 95       	ret

Disassembly of section .text.exit:

000007ee <exit>:
 7ee:	ec 01       	movw	r28, r24
 7f0:	0e 94 29 04 	call	0x852	; 0x852 <__funcs_on_exit>
 7f4:	0e 94 28 04 	call	0x850	; 0x850 <_fini>
 7f8:	ce 01       	movw	r24, r28
 7fa:	0e 94 2a 04 	call	0x854	; 0x854 <__simulator_exit>
 7fe:	ce 01       	movw	r24, r28
 800:	0e 94 26 04 	call	0x84c	; 0x84c <_Exit>

Disassembly of section .text._Exit:

0000084c <_Exit>:
 84c:	0e 94 65 00 	call	0xca	; 0xca <_exit>
